{"version":3,"sources":["components/header/Header.tsx","components/archive-upload/ArchiveUpload.tsx","utils/color.ts","components/message-chart/MessageChart.tsx","components/modal/Modal.tsx","components/message/MessageModal.tsx","utils/search.ts","components/search/Search.tsx","components/search/SearchResult.tsx","components/message/Message.tsx","components/message/MessageList.tsx","components/chat/Chat.tsx","components/message-pie/MessagePie.tsx","App.tsx","utils/archive.ts","utils/file.ts","index.tsx"],"names":["Header","href","download","ArchiveUpload","props","type","id","className","accept","onChange","e","target","files","file","setFile","colors","require","palette","map","c","getColorFromIndex","i","length","MessageChart","messages","useState","interval","setInterval","Array","isArray","dataSet","useFormat","message","date","moment","dateTime","startOf","format","hasOwnProperty","sender","data","datasets","Object","keys","label","entries","s","x","y","fill","borderColor","options","responsive","animation","elements","line","tension","title","display","text","plugins","zoom","pan","enabled","mode","scales","xAxes","time","parser","scaleLabel","labelString","yAxes","ticks","stepSize","beginAtZero","value","v","key","modalRoot","document","getElementById","Modal","element","createElement","appendChild","this","removeChild","createPortal","children","React","Component","MessageModal","close","onClick","toUTCString","split","item","doSearch","query","toLocaleLowerCase","includes","f","Search","setQuery","search","useCallback","debounce","searchResult","from","useEffect","placeholder","SearchResult","messageIndexes","select","selected","setSelected","disabled","Message","isWhatsApp","toLocaleString","MessageList","highlighted","scrollToItem","listRef","createRef","current","Row","index","style","height","width","ref","itemCount","itemSize","Chat","setSearchResult","gotoItem","setGotoItem","result","MessagePie","numberOfMessagesPerSender","chatParticipants","push","_data","_labels","forEach","numberOfmsg","backgroundColor","labels","parseArchiveWorker","Worker","process","App","lines","setLines","percentage","setPercentage","setMessages","handler","Math","round","addEventListener","removeEventListener","postMessage","maxLines","forEachLine","onComplete","decoder","TextDecoder","offset","linecount","results","fr","FileReader","seek","size","slice","readAsArrayBuffer","onload","decode","stream","pop","onerror","error","readLines","bytes","floor","log","pow","bytesToSize","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.55a951d8.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Header = () => {\n  return (\n    <header>\n      <h1>WhatsApp Chat Analysis</h1>\n      <p>Upload a Whatsapp chat archive to view the messages and stats.</p>\n      <p>\n        Everything is done in the browser, so no data is sent to a server and\n        the data is not stored anywhere. But don't use this if you have\n        <b>any</b> privacy concerns.\n      </p>\n      <p>\n        Click <a href=\"https://faq.whatsapp.com/en/android/23756533/\">here </a>{\" \"}\n        to find out how to export a chat on android.\n      </p>\n      <p>\n        <a\n          download\n          href=\"https://raw.githubusercontent.com/DWethmar/whatsapp-chat-analysis/master/public/_chat.txt\"\n        >\n          Example Whatsapp chat\n        </a>\n      </p>\n    </header>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nexport interface ArchiveUploadProps {\n    setFile: (file: File) => void\n}\n\nexport const ArchiveUpload: FunctionComponent<ArchiveUploadProps>  = (props) => {\n\n    const handleFileChosen = (file: File) => {\n        props.setFile(file);\n    }\n\n    return (\n        <div>\n            <input type=\"file\"\n            id=\"file\"\n            className=\"input-file\"\n            accept=\".txt\"\n            onChange={\n                e => !!e.target && !!e.target.files && handleFileChosen(\n                    e.target.files[0]\n                )\n            }\n        />\n        </div>\n    );\n}\n","const palette = require('google-palette');\n\nconst colors = palette(['tol', 'qualitative'], 50, 0).map((c: string) => `#${c}`);\n\nexport function getColorFromIndex(i: number) {\n    return colors[i % colors.length];\n}\n","import React, { FunctionComponent, useState } from \"react\";\nimport moment from \"moment\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chartjs-plugin-zoom\";\n\nimport { WhatsAppMessage } from \"../../models/whatsappMessage\";\nimport { getColorFromIndex } from \"../../utils/color\";\n\ntype Interval = \"minute\" | \"hour\" | \"day\" | \"week\" | \"month\";\n\nexport interface MessageChartProps {\n  messages: WhatsAppMessage[];\n}\n\nexport const MessageChart: FunctionComponent<MessageChartProps> = (props) => {\n  const messages = props.messages;\n\n  const [interval, setInterval] = useState<Interval>(\"month\");\n\n  if (!Array.isArray(messages) || messages.length === 0) {\n    return <span>Chart has no data.</span>;\n  }\n\n  const dataSet: Record<string, Record<string, number>> = {};\n\n  let useFormat = \"\";\n\n  const monthFormat = \"MM/YYYY\";\n  const dayFormat = \"DD/MM/YYYY\";\n  const dateTimeFormat = \"DD/MM/YYYY HH:mm\";\n\n  for (const message of messages) {\n    let date: string = \"\";\n\n    switch (interval) {\n      case \"minute\":\n        date = moment(message.dateTime)\n          .startOf(\"minute\")\n          .format(dateTimeFormat);\n        useFormat = dateTimeFormat;\n        break;\n      case \"hour\":\n        date = moment(message.dateTime).startOf(\"hour\").format(dateTimeFormat);\n        useFormat = dateTimeFormat;\n        break;\n      case \"day\":\n        date = moment(message.dateTime).format(dayFormat);\n        useFormat = dayFormat;\n        break;\n      case \"week\":\n        date = moment(message.dateTime).startOf(\"week\").format(dayFormat);\n        useFormat = dayFormat;\n        break;\n      case \"month\":\n        date = moment(message.dateTime).format(monthFormat);\n        useFormat = monthFormat;\n        break;\n    }\n\n    if (!dataSet.hasOwnProperty(message.sender)) {\n      dataSet[message.sender] = {};\n    }\n\n    if (!dataSet[message.sender].hasOwnProperty(date)) {\n      dataSet[message.sender][date] = 0;\n    }\n\n    dataSet[message.sender][date]++;\n  }\n\n  const data = {\n    datasets: [\n      ...Object.keys(dataSet).map((sender, i) => {\n        return {\n          label: sender,\n          data: Object.entries(dataSet[sender]).map((s) => ({\n            x: s[0],\n            y: s[1],\n          })),\n          fill: false,\n          borderColor: sender === \"Whatsapp\" ? \"#075E54\" : getColorFromIndex(i),\n        };\n      }),\n    ],\n  };\n\n  const options = {\n    responsive: true,\n    animation: false,\n    elements: {\n      line: {\n        tension: 0,\n      },\n    },\n    title: {\n      display: true,\n      text: \"Messages over time.\",\n    },\n    plugins: {\n      zoom: {\n        pan: {\n          enabled: true,\n          mode: \"x\",\n        },\n        zoom: {\n          enabled: true,\n          mode: \"x\",\n        },\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            parser: useFormat,\n          },\n          scaleLabel: {\n            display: true,\n            labelString: \"Date\",\n          },\n        },\n      ],\n      yAxes: [\n        {\n          scaleLabel: {\n            display: true,\n            labelString: \"Number of messages\",\n          },\n          ticks: {\n            stepSize: 1,\n            beginAtZero: true,\n          },\n        },\n      ],\n    },\n  };\n\n  return (\n    <div>\n      <select\n        value={interval}\n        onChange={(e) => setInterval(e.target.value as Interval)}\n      >\n        {[\"day\", \"week\", \"month\"].map((v, i) => (\n          <option key={i} value={v}>\n            {v}\n          </option>\n        ))}\n      </select>\n      <Line data={data} options={options}></Line>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { createPortal } from \"react-dom\";\n\nimport \"./Modal.css\";\n\n// We get hold of the div with the id modal that we have created in index.html\nconst modalRoot = document.getElementById(\"modal\");\n\nexport interface ModalProps {}\n\nexport class Modal extends React.Component<ModalProps> {\n  private element: HTMLDivElement;\n\n  constructor(props: ModalProps) {\n    super(props);\n    // We create an element div for this modal\n    this.element = document.createElement(\"div\");\n  }\n\n  // We append the created div to the div#modal\n  componentDidMount() {\n    if (modalRoot) {\n      modalRoot.appendChild(this.element);\n    }\n  }\n\n  /**\n   * We remove the created div when this Modal Component is unmounted\n   * Used to clean up the memory to avoid memory leak\n   */\n  componentWillUnmount() {\n    if (modalRoot) {\n      modalRoot.removeChild(this.element);\n    }\n  }\n\n  render() {\n    return createPortal(this.props.children, this.element);\n  }\n}\n","import React from \"react\";\n\nimport \"./MessageModal.css\";\n\nimport { WhatsAppMessage } from \"../../models/whatsappMessage\";\nimport { Modal } from \"../modal/Modal\";\n\nexport interface MessageModalProps {\n  message: WhatsAppMessage;\n  close: () => void;\n}\n\nexport const MessageModal: React.FunctionComponent<MessageModalProps> = (\n  props\n) => {\n  const { message, close, children } = props;\n  return (\n    <Modal>\n      <div className=\"message-modal\">\n        <button className=\"message-modal__close\" onClick={close}>\n          close\n        </button>\n\n        <h2>{message.sender}</h2>\n\n        <span>{message.dateTime.toUTCString()}</span>\n\n        {children && <div>{children}</div>}\n\n        <div className=\"message-modal__message\">\n          {message.message.split(\"\\n\").map((item, i) => {\n            return <p key={i}>{item}</p>;\n          })}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n","import { WhatsAppMessage } from \"../models/whatsappMessage\";\n\nexport function *doSearch(messages: WhatsAppMessage[], query: string) {\n    let i = 0;\n    for (const message of messages) {\n        if (message.message.toLocaleLowerCase().includes(query)) {\n            yield i;\n        }\n        i++;\n    }\n}\n","import React, { useEffect, useCallback } from \"react\";\nimport { debounce } from \"lodash\";\n\nimport { WhatsAppMessage } from \"../../models/whatsappMessage\";\nimport { doSearch } from \"../../utils/search\";\n\nexport interface SearchProps {\n  messages: WhatsAppMessage[];\n  searchResult: (index: number[]) => void;\n}\n\nconst minChars = 2;\n\nexport const Search: React.FunctionComponent<SearchProps> = (props) => {\n  const [query, setQuery] = React.useState(\"\");\n\n  const search = useCallback(\n    debounce((query: string) => {\n      if (query.length > minChars) {\n        const searchResult = Array.from(\n          doSearch(props.messages, query.toLocaleLowerCase())\n        );\n        props.searchResult(searchResult);\n      }\n    }, 500),\n    []\n  );\n\n  useEffect(() => {\n    search(query);\n  }, [query, search]);\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder={`Search (min ${minChars} chars)`}\n        onChange={(e) => setQuery(e.target.value)}\n      />\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\n\nexport interface SearchResultProps {\n  messageIndexes: number[];\n  select: (index: number) => void;\n}\n\nexport const SearchResult: React.FunctionComponent<SearchResultProps> = (\n  props\n) => {\n  const { messageIndexes, select } = props;\n\n  const [selected, setSelected] = useState<number>(0);\n\n  useEffect(() => {\n    if (\n      messageIndexes.length > 0 &&\n      selected >= 0 &&\n      selected < messageIndexes.length\n    ) {\n      select(messageIndexes[selected]);\n    }\n  }, [messageIndexes, selected, select]);\n\n  return (\n    <div>\n      {messageIndexes.length > 0 && (\n        <div>\n          <span>\n            Search results: {selected + 1}/{props.messageIndexes.length}\n          </span>\n\n          <button\n            disabled={selected === 0}\n            onClick={() => setSelected(selected - 1)}\n          >\n            Previous\n          </button>\n\n          <button\n            disabled={selected >= messageIndexes.length - 1}\n            onClick={() => setSelected(selected + 1)}\n          >\n            Next\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport \"./Message.css\";\n\nimport { WhatsAppMessage } from \"../../models/whatsappMessage\";\n\nexport interface MessageProps {\n  message: WhatsAppMessage;\n}\n\nexport const Message: React.FunctionComponent<MessageProps> = (props) => {\n  const { message } = props;\n  return (\n    <div className=\"message\">\n      <div\n        className={\n          \"message__sender\" +\n          (message.isWhatsApp ? \" message__sender--whatsapp\" : \"\")\n        }\n      >\n        {message.sender}\n      </div>\n      <div className=\"message__date-time\">\n        {message.dateTime.toLocaleString()}\n      </div>\n      <div className=\"message__message\" title={message.message}>\n        {message.message.split(\"\\n\").map((item, i) => {\n          return <p key={i}>{item}</p>;\n        })}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { FixedSizeList as List, FixedSizeList } from \"react-window\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\n\nimport \"./MessageList.css\";\n\nimport { WhatsAppMessage } from \"../../models/whatsappMessage\";\nimport { Message } from \"./Message\";\n\nexport interface MessageListProps {\n  messages: WhatsAppMessage[];\n  highlighted: number[];\n  scrollToItem: number;\n  select: (index: number) => void;\n}\n\nexport const MessageList: React.FunctionComponent<MessageListProps> = (\n  props\n) => {\n  const { messages, highlighted, select, scrollToItem } = props;\n\n  const listRef = React.createRef<FixedSizeList>();\n\n  useEffect(() => {\n    if (scrollToItem) {\n      listRef.current?.scrollToItem(scrollToItem, \"start\");\n    }\n  }, [listRef, scrollToItem]);\n\n  const Row = ({\n    index,\n    style,\n  }: {\n    index: number;\n    style: React.CSSProperties;\n  }) => {\n    const message = messages[index];\n    return (\n      <div\n        style={style}\n        key={index}\n        className={\n          \"message-list-row\" +\n          \" message-list-row--\" +\n          (index % 2 === 0 ? \"even\" : \"odd\") +\n          (highlighted.includes(index) ? \" message--selected\" : \"\")\n        }\n      >\n        <Message message={message}></Message>\n        <div className=\"message-list-row__actions\">\n          <button onClick={() => select(index)}>view</button>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"message-list\">\n      <AutoSizer>\n        {({ height, width }) => (\n          <List\n            ref={listRef}\n            height={height}\n            itemCount={messages.length}\n            itemSize={40}\n            width={width}\n          >\n            {Row}\n          </List>\n        )}\n      </AutoSizer>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { WhatsAppMessage } from \"../../models/whatsappMessage\";\nimport { MessageModal } from \"../message/MessageModal\";\nimport { Search } from \"../search/Search\";\nimport { SearchResult } from \"../search/SearchResult\";\nimport { MessageList } from \"../message/MessageList\";\n\nexport interface ChatProps {\n  messages: WhatsAppMessage[];\n}\n\nexport const Chat: React.FunctionComponent<ChatProps> = (props) => {\n  const { messages } = props;\n\n  const [searchResult, setSearchResult] = useState<number[]>([]);\n\n  const [gotoItem, setGotoItem] = useState<number | null>(null);\n  const [selected, setSelected] = useState<number | null>(null);\n\n  return (\n    <div className=\"chat\">\n      {selected !== null && (\n        <MessageModal\n          message={messages[selected]}\n          close={() => setSelected(null)}\n        >\n          {selected > 0 && (\n            <button onClick={() => setSelected(selected - 1)}>Previous</button>\n          )}\n\n          {selected < messages.length - 1 && (\n            <button onClick={() => setSelected(selected + 1)}>Next</button>\n          )}\n        </MessageModal>\n      )}\n\n      <Search\n        messages={messages}\n        searchResult={(result) => setSearchResult(result)}\n      ></Search>\n\n      <SearchResult\n        messageIndexes={searchResult}\n        select={(index) => setGotoItem(index)}\n      ></SearchResult>\n\n      <hr />\n\n      <MessageList\n        messages={messages}\n        highlighted={searchResult}\n        select={(index) => setSelected(index)}\n        scrollToItem={gotoItem || 0}\n      ></MessageList>\n    </div>\n  );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\n\nimport { WhatsAppMessage } from \"../../models/whatsappMessage\";\nimport { getColorFromIndex } from \"../../utils/color\";\n\nexport interface MessagePieProps {\n  messages: WhatsAppMessage[];\n}\n\nexport const MessagePie: FunctionComponent<MessagePieProps> = (props) => {\n  const messages = props.messages;\n\n  if (!Array.isArray(messages) || messages.length === 0) {\n    return <span>Chart has no data.</span>;\n  }\n\n  const numberOfMessagesPerSender: Record<string, number> = {};\n\n  const colors: string[] = [];\n\n  let chatParticipants = 0;\n  for (const message of messages) {\n    if (!numberOfMessagesPerSender.hasOwnProperty(message.sender)) {\n      numberOfMessagesPerSender[message.sender] = 0;\n      colors.push(getColorFromIndex(chatParticipants));\n      chatParticipants++;\n    }\n    numberOfMessagesPerSender[message.sender]++;\n  }\n\n  const _data: number[] = [];\n  const _labels: string[] = [];\n\n  Object.entries(numberOfMessagesPerSender).forEach(([sender, numberOfmsg]) => {\n    _data.push(numberOfmsg);\n    _labels.push(sender);\n  });\n\n  const data = {\n    datasets: [\n      {\n        data: _data,\n        backgroundColor: colors,\n      },\n    ],\n    labels: _labels,\n  };\n\n  const options = {\n    responsive: true,\n    animation: false,\n    elements: {\n      line: {\n        tension: 0,\n      },\n    },\n    title: {\n      display: true,\n      text: \"Amount of messages per chat participant.\",\n    },\n  };\n\n  return (\n    <div>\n      <Doughnut data={data} options={options}></Doughnut>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\nimport \"./pagination.css\";\n\nimport { Header } from \"./components/header/Header\";\nimport { ArchiveUpload } from \"./components/archive-upload/ArchiveUpload\";\nimport { readLines } from \"./utils/archive\";\nimport { WhatsAppMessage } from \"./models/whatsappMessage\";\nimport { bytesToSize } from \"./utils/file\";\nimport { MessageChart } from \"./components/message-chart/MessageChart\";\nimport { Chat } from \"./components/chat/Chat\";\nimport { MessagePie } from \"./components/message-pie/MessagePie\";\n\nconst parseArchiveWorker = new Worker(\n  process.env.PUBLIC_URL + \"/workers/parse-archive.js\"\n);\n\nfunction App() {\n  const [file, setFile] = useState<File | null>();\n  const [lines, setLines] = useState<string[]>();\n\n  const [percentage, setPercentage] = useState<number>(0);\n  const [messages, setMessages] = useState<WhatsAppMessage[]>([]);\n\n  useEffect(() => {\n    const handler = (e: any) => {\n      if (e.data.hasOwnProperty(\"percentage\")) {\n        setPercentage(Math.round(e.data.percentage));\n      }\n\n      if (e.data.hasOwnProperty(\"messages\")) {\n        setMessages(e.data.messages);\n      }\n    };\n\n    parseArchiveWorker.addEventListener(\"message\", handler, false);\n    return () => parseArchiveWorker.removeEventListener(\"message\", handler);\n  });\n\n  useEffect(() => {\n    if (Array.isArray(lines)) {\n      setPercentage(0);\n      setMessages([]);\n      parseArchiveWorker.postMessage(lines);\n    }\n  }, [lines]);\n\n  useEffect(() => {\n    const lines: string[] = [];\n    if (file) {\n      readLines(\n        file,\n        1000000000,\n        (line) => lines.push(line),\n        (error) => {\n          if (error) {\n            throw error;\n          } else {\n            setLines(lines);\n          }\n        }\n      );\n    }\n  }, [file]);\n\n  return (\n    <div className=\"App\">\n      <Header></Header>\n\n      <hr />\n\n      <ArchiveUpload setFile={setFile}></ArchiveUpload>\n\n      <br />\n\n      <table>\n        <tbody>\n          <tr>\n            <td>Size:</td>\n            <td>{!!file ? bytesToSize(file.size) : 0}</td>\n          </tr>\n          <tr>\n            <td>Loading:</td>\n            <td>{percentage}%</td>\n          </tr>\n          <tr>\n            <td>Messages:</td>\n            <td>{messages.length}</td>\n          </tr>\n        </tbody>\n      </table>\n\n      <hr />\n\n      {percentage === 100 && messages.length > 0 && (\n        <>\n          <Chat messages={messages} />\n\n          <hr />\n\n          <MessageChart messages={messages}></MessageChart>\n\n          <hr />\n\n          <MessagePie messages={messages}></MessagePie>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import moment from 'moment'\nimport { WhatsAppMessage } from \"../models/whatsappMessage\";\n\n/**\n * Read up to and including |maxlines| lines from |file|.\n *\n * @param {Blob} file - The file to be read.\n * @param {integer} maxLines - The maximum number of lines to read.\n * @param {function(string)} forEachLine - Called for each line.\n * @param {function(error)} onComplete - Called when the end of the file\n *     is reached or when |maxlines| lines have been read.\n */\nexport function readLines(\n  file: File, \n  maxLines: number, \n  forEachLine: (line: string) => void, \n  onComplete: (error?: DOMException | null) => void\n) {\n  const CHUNK_SIZE = 50000; // 50kb, arbitrarily chosen.\n  const decoder = new TextDecoder();\n  let offset = 0;\n  let linecount = 0;\n  let results = '';\n  const fr = new FileReader();\n\n  fr.onload = function() {\n      // Use stream:true in case we cut the file\n      // in the middle of a multi-byte character\n      results += decoder.decode(fr.result as ArrayBuffer, {stream: true});\n      var lines = results.split('\\n');\n      results = lines.pop() as string; // In case the line did not end yet.\n      linecount += lines.length;\n  \n      if (linecount > maxLines) {\n          // Read too many lines? Truncate the results.\n          lines.length -= linecount - maxLines;\n          linecount = maxLines;\n      }\n  \n      for (var i = 0; i < lines.length; ++i) {\n          forEachLine(lines[i] + '\\n');\n      }\n\n      offset += CHUNK_SIZE;\n      seek();\n  };\n  fr.onerror = function() {\n      onComplete(fr.error);\n  };\n  seek();\n  \n  function seek() {\n      if (linecount === maxLines) {\n          // We found enough lines.\n          onComplete(); // Done.\n          return;\n      }\n      if (offset !== 0 && offset >= file.size) {\n          // We did not find all lines, but there are no more lines.\n          forEachLine(results); // This is from lines.pop(), before.\n          onComplete(); // Done\n          return;\n      }\n      var slice = file.slice(offset, offset + CHUNK_SIZE);\n      fr.readAsArrayBuffer(slice);\n  }\n}\n\nexport function parseArchive(lines: string[], process: (percentage: number) => void): WhatsAppMessage[] {\n  const messages: WhatsAppMessage[] = [];\n\n  let whatsAppMessage: WhatsAppMessage | null = null;\n  const messageRegex = /\\[(\\d{2}-\\d{2}-\\d{4}\\s\\d{2}:\\d{2}:\\d{2})]\\s(?:([^:]+):\\s)?(.*)/;\n  \n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n\n    if (messageRegex.test(line)) {\n      const r = messageRegex.exec(line);\n\n      if (r !== null) {\n        // ‎[30-03-2020 19:57:50] ananas: ananans\n        const dateTime = moment(r[1], \"DD-MM-YYYY HH:mm:ss\");\n\n        whatsAppMessage = {\n          dateTime: dateTime.toDate(),\n          sender: r[2] || \"Whatsapp\",\n          message: r[3],\n          isWhatsApp: r[2] === undefined,\n        };\n        messages.push(whatsAppMessage);\n      } \n    } else {\n      if (whatsAppMessage) {\n        whatsAppMessage.message += line;\n      }\n    }\n\n    // Only report every 1000 lines and do that lines / 1000 times.\n    if (i % Math.round(lines.length / 1000) * 1000 === 0) {\n      process(((i / lines.length) * 100));\n    }\n  }\n  process(100);\n  return messages;\n}\n","export function bytesToSize(bytes: number) {\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    if (bytes === 0) {\n        return '0 Byte';\n    }\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i)) + ' ' + sizes[i];\n }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}