{"version":3,"sources":["components/header/Header.tsx","components/archive-upload/ArchiveUpload.tsx","utils/color.ts","components/chart/Chart.tsx","components/message-list/MessageList.tsx","App.tsx","utils/archive.ts","utils/file.ts","serviceWorker.ts","index.tsx"],"names":["Header","href","download","process","ArchiveUpload","props","type","id","className","accept","onChange","e","target","files","file","setFile","colors","require","palette","map","c","getColorFromIndex","i","length","Chart","messages","Array","isArray","dataSet","useFormat","message","date","interval","moment","dateTime","startOf","format","hasOwnProperty","sender","data","datasets","Object","keys","label","entries","s","x","y","fill","borderColor","options","responsive","elements","line","tension","title","display","text","plugins","zoom","pan","enabled","mode","scales","xAxes","time","parser","scaleLabel","labelString","yAxes","ticks","stepSize","beginAtZero","MessageList","m","key","toLocaleString","parseArchiveWorker","Worker","App","useState","page","setPage","lines","setLines","percentage","setPercentage","setMessages","useEffect","handler","Math","round","addEventListener","removeEventListener","postMessage","maxLines","forEachLine","onComplete","decoder","TextDecoder","offset","linecount","results","fr","FileReader","seek","size","slice","readAsArrayBuffer","onload","decode","result","stream","split","pop","onerror","error","readLines","push","pagesMessages","bytes","floor","log","pow","bytesToSize","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","ceil","forcePage","marginPagesDisplayed","pageRangeDisplayed","onPageChange","selectedItem","selected","containerClassName","activeClassName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"0OAEaA,G,YAAS,WACpB,OACE,gCACE,sDACA,6FACA,gIAAqG,kCAArG,sBACA,oCAAS,uBAAGC,KAAK,iDAAR,SAAT,iDACA,2BAAG,uBAAGC,UAAQ,EAACD,KAAME,qCAAlB,sCCHIC,EAAwD,SAACC,GAMlE,OACI,6BACI,2BAAOC,KAAK,OACZC,GAAG,OACHC,UAAU,aACVC,OAAO,OACPC,SACI,SAAAC,GAAC,QAAMA,EAAEC,UAAYD,EAAEC,OAAOC,QAXhBC,EAYVH,EAAEC,OAAOC,MAAM,QAX3BR,EAAMU,QAAQD,IADO,IAACA,O,4CCNxBE,G,OAFUC,EAAQ,IAETC,CAAQ,CAAC,MAAO,eAAgB,GAAI,GAAGC,KAAI,SAACC,GAAD,iBAAmBA,OAEtE,SAASC,EAAkBC,GAC9B,OAAON,EAAOM,EAAIN,EAAOO,QCQtB,IAAMC,EAAuC,SAACnB,GACnD,IAAMoB,EAAWpB,EAAMoB,SAEvB,IAAKC,MAAMC,QAAQF,IAAiC,IAApBA,EAASF,OACvC,OAAO,oDAGT,IAP6D,EAOvDK,EAAkD,GAEpDC,EAAY,GAT6C,cAevCJ,GAfuC,IAe7D,2BAAgC,CAAC,IAAtBK,EAAqB,QAC1BC,EAAe,GAEnB,OAAQ1B,EAAM2B,UACZ,IAAK,SACHD,EAAOE,IAAOH,EAAQI,UACnBC,QAAQ,UACRC,OATc,oBAUfP,EAVe,mBAWjB,MACF,IAAK,OACHE,EAAOE,IAAOH,EAAQI,UAAUC,QAAQ,QAAQC,OAb/B,oBAcjBP,EAdiB,mBAejB,MACF,IAAK,MACHE,EAAOE,IAAOH,EAAQI,UAAUE,OAlBpB,cAmBZP,EAnBY,aAoBZ,MACF,IAAK,QACHE,EAAOE,IAAOH,EAAQI,UAAUC,QAAQ,SAASC,OAvBnC,WAwBdP,EAxBc,UA4BbD,EAAQS,eAAeP,EAAQQ,UAClCV,EAAQE,EAAQQ,QAAU,IAGvBV,EAAQE,EAAQQ,QAAQD,eAAeN,KAC1CH,EAAQE,EAAQQ,QAAQP,GAAQ,GAGlCH,EAAQE,EAAQQ,QAAQP,MA/CmC,8BAkD7D,IAAMQ,EAAO,CACXC,SAAS,YACJC,OAAOC,KAAKd,GAAST,KAAI,SAACmB,EAAQhB,GACnC,MAAO,CACLqB,MAAOL,EACPC,KAAME,OAAOG,QAAQhB,EAAQU,IAASnB,KAAI,SAAC0B,GAAD,MAAQ,CAChDC,EAAGD,EAAE,GACLE,EAAGF,EAAE,OAEPG,MAAM,EACNC,YAAa5B,EAAkBC,SAMjC4B,EAAU,CACdC,YAAY,EACZC,SAAU,CACRC,KAAM,CACJC,QAAS,IAGbC,MAAO,CACLC,SAAS,EACTC,KAAM,uBAERC,QAAS,CACPC,KAAM,CACJC,IAAK,CACHC,SAAS,EACTC,KAAM,KAERH,KAAM,CACJE,SAAS,EACTC,KAAM,OAIZC,OAAQ,CACNC,MAAO,CACL,CACE1D,KAAM,OACN2D,KAAM,CACJC,OAAQrC,GAEVsC,WAAY,CACVX,SAAS,EACTY,YAAa,UAInBC,MAAO,CACL,CACEF,WAAY,CACVX,SAAS,EACTY,YAAa,sBAEfE,MAAO,CACLC,SAAU,EACVC,aAAa,OAOvB,OAAO,kBAAC,IAAD,CAAMjC,KAAMA,EAAMW,QAASA,KCzHvBuB,G,OAAyD,SACpEpE,GAEA,OACE,6BACGA,EAAMoB,SAASN,KAAI,SAACuD,EAAGpD,GAAJ,OAClB,yBAAKd,UAAU,UAAUmE,IAAKrD,GAC5B,yBAAKd,UAAU,mBAAmBkE,EAAEpC,QACpC,yBAAK9B,UAAU,sBACZkE,EAAExC,SAAS0C,kBAEd,yBAAKpE,UAAU,oBAAoBkE,EAAE5C,gBCNzC+C,EAAqB,IAAIC,OAC7B3E,oDAwHa4E,MAnHf,WAAgB,IAAD,EACWC,mBAAiB,GAD5B,mBACNC,EADM,KACAC,EADA,OAEWF,qBAFX,mBAENlE,EAFM,KAEAC,EAFA,OAGaiE,qBAHb,mBAGNG,EAHM,KAGCC,EAHD,OAKuBJ,mBAAiB,GALxC,mBAKNK,EALM,KAKMC,EALN,OAMmBN,mBAA4B,IAN/C,mBAMNvD,EANM,KAMI8D,EANJ,KAUbC,qBAAU,WACR,IAAMC,EAAU,SAAC9E,GACXA,EAAE4B,KAAKF,eAAe,eACxBiD,EAAcI,KAAKC,MAAMhF,EAAE4B,KAAK8C,aAG9B1E,EAAE4B,KAAKF,eAAe,aACxBkD,EAAY5E,EAAE4B,KAAKd,WAIvB,OADAoD,EAAmBe,iBAAiB,UAAWH,GAAS,GACjD,kBAAMZ,EAAmBgB,oBAAoB,UAAWJ,OAGjED,qBAAU,WACJ9D,MAAMC,QAAQwD,KAChBD,EAAQ,GACRI,EAAc,GACdC,EAAY,IACZV,EAAmBiB,YAAYX,MAEhC,CAACA,IAEJK,qBAAU,WACR,IAAML,EAAkB,GACpBrE,GC3CD,SACLA,EACAiF,EACAC,EACAC,GAEA,IACMC,EAAU,IAAIC,YAChBC,EAAS,EACTC,EAAY,EACZC,EAAU,GACRC,EAAK,IAAIC,WA4Bf,SAASC,IACL,GAAIJ,IAAcN,EAAlB,CAKA,GAAe,IAAXK,GAAgBA,GAAUtF,EAAK4F,KAI/B,OAFAV,EAAYM,QACZL,IAGJ,IAAIU,EAAQ7F,EAAK6F,MAAMP,EAAQA,EA7ChB,KA8CfG,EAAGK,kBAAkBD,QAVjBV,IA7BRM,EAAGM,OAAS,WAIR,IAAI1B,GADJmB,GAAWJ,EAAQY,OAAOP,EAAGQ,OAAuB,CAACC,QAAQ,KACzCC,MAAM,MAC1BX,EAAUnB,EAAM+B,OAChBb,GAAalB,EAAM5D,QAEHwE,IAEZZ,EAAM5D,QAAU8E,EAAYN,EAC5BM,EAAYN,GAGhB,IAAK,IAAIzE,EAAI,EAAGA,EAAI6D,EAAM5D,SAAUD,EAChC0E,EAAYb,EAAM7D,GAAK,MAG3B8E,GAzBe,IA0BfK,KAEJF,EAAGY,QAAU,WACTlB,EAAWM,EAAGa,QAElBX,IDOIY,CACEvG,EACA,KACA,SAACuC,GAAD,OAAU8B,EAAMmC,KAAKjE,MACrB,SAAC+D,GACC,GAAIA,EACF,MAAMA,EAENhC,EAASD,QAKhB,CAACrE,IAEJ,IAIMyG,EA/CiC,MAAflC,EAgDpB,GACA5D,EAASkF,MA3DE,GA2DI1B,EA3DJ,GA2DqBA,EA3DrB,IA6Df,OACE,yBAAKzE,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAeO,QAASA,IAExB,6BAEA,+BACE,+BACE,4BACE,0CACA,4BAAOD,EE1FZ,SAAqB0G,GAExB,GAAc,IAAVA,EACA,MAAO,SAEX,IAAMlG,EAAIoE,KAAK+B,MAAM/B,KAAKgC,IAAIF,GAAS9B,KAAKgC,IAAI,OAChD,OAAOhC,KAAKC,MAAM6B,EAAQ9B,KAAKiC,IAAI,KAAMrG,IAAM,IALnC,CAAC,QAAS,KAAM,KAAM,KAAM,MAKmBA,GFoFrCsG,CAAY9G,EAAK4F,MAAQ,IAEzC,4BACE,yCACA,4BAAKjF,EAASF,QACd,oCAAY8D,EAAZ,MAEF,4BACE,6CACA,4BAAKJ,EAAO,MAKlB,6BACA,6BAEA,6BAEA,kBAAC,IAAD,CACE4C,cAAe,WACfC,UAAW,OACXC,WAAY,MACZC,eAAgB,QAChBC,UAAWvC,KAAKwC,KAAKzG,EAASF,OAhGrB,IAiGT4G,UAAWlD,EACXmD,qBAAsB,EACtBC,mBAAoB,EACpBC,aA/Ce,SAACC,GACpBrD,EAAQqD,EAAaC,WA+CjBC,mBAAoB,aACpBC,gBAAiB,WAGnB,6BAEA,6BACA,6BAGA,kBAAC,EAAD,CAAajH,SAAU8F,IACvB,kBAAC,EAAD,CAAO9F,SAAUA,EAAUO,SAAS,YGtHtB2G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLwC,QAAQxC,MAAMA,EAAMtF,a","file":"static/js/main.4b947ad1.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Header = () => {\n  return (\n    <header>\n      <h1>WhatsApp Chat Analysis</h1>\n      <p>Upload a Whatsapp chat archive to view the messages and stats.</p>\n      <p>Everything is done in the browser, so no data is sent to a server. But don't use this is you have <b>any</b> privacy concerns.</p>\n      <p>Click <a href=\"https://faq.whatsapp.com/en/android/23756533/\">here </a> to find out how to export a chat on android.</p>\n      <p><a download href={process.env.PUBLIC_URL + \"/chat.text\"}>Download example Whatsapp chat</a></p>\n    </header>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nexport interface ArchiveUploadProps {\n    setFile: (file: File) => void\n}\n\nexport const ArchiveUpload: FunctionComponent<ArchiveUploadProps>  = (props) => {\n\n    const handleFileChosen = (file: File) => {\n        props.setFile(file);\n    }\n\n    return (\n        <div>\n            <input type=\"file\"\n            id=\"file\"\n            className=\"input-file\"\n            accept=\".txt\"\n            onChange={\n                e => !!e.target && !!e.target.files && handleFileChosen(\n                    e.target.files[0]\n                )\n            }\n        />\n        </div>\n    );\n}\n","const palette = require('google-palette');\n\nconst colors = palette(['tol', 'qualitative'], 50, 0).map((c: string) => `#${c}`);\n\nexport function getColorFromIndex(i: number) {\n    return colors[i % colors.length];\n}\n","import React, { FunctionComponent } from \"react\";\nimport moment from \"moment\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chartjs-plugin-zoom\";\n\nimport { WhatsAppMessage } from \"../../models/whatsapp-message\";\nimport { getColorFromIndex } from \"../../utils/color\";\n\nexport interface ChartProps {\n  messages: WhatsAppMessage[];\n  interval: \"minute\" | \"hour\" | \"day\" | \"month\";\n}\n\nexport const Chart: FunctionComponent<ChartProps> = (props) => {\n  const messages = props.messages;\n\n  if (!Array.isArray(messages) || messages.length === 0) {\n    return <span>Chart has no data.</span>;\n  }\n\n  const dataSet: Record<string, Record<string, number>> = {};\n\n  let useFormat = \"\";\n\n  const monthFormat = \"MM/YYYY\";\n  const dayFormat = \"DD/MM/YYYY\";\n  const dateTimeFormat = \"DD/MM/YYYY HH:mm\";\n\n  for (const message of messages) {\n    let date: string = \"\";\n\n    switch (props.interval) {\n      case \"minute\":\n        date = moment(message.dateTime)\n          .startOf(\"minute\")\n          .format(dateTimeFormat);\n          useFormat = dateTimeFormat;\n        break;\n      case \"hour\":\n        date = moment(message.dateTime).startOf(\"hour\").format(dateTimeFormat);\n        useFormat = dateTimeFormat;\n        break;\n      case \"day\":\n        date = moment(message.dateTime).format(dayFormat);\n        useFormat = dayFormat;\n        break;\n      case \"month\":\n        date = moment(message.dateTime).startOf(\"month\").format(monthFormat);\n        useFormat = monthFormat;\n        break;\n    }\n\n    if (!dataSet.hasOwnProperty(message.sender)) {\n      dataSet[message.sender] = {};\n    }\n\n    if (!dataSet[message.sender].hasOwnProperty(date)) {\n      dataSet[message.sender][date] = 0;\n    }\n\n    dataSet[message.sender][date]++;\n  }\n\n  const data = {\n    datasets: [\n      ...Object.keys(dataSet).map((sender, i) => {\n        return {\n          label: sender,\n          data: Object.entries(dataSet[sender]).map((s) => ({\n            x: s[0],\n            y: s[1],\n          })),\n          fill: false,\n          borderColor: getColorFromIndex(i),\n        };\n      }),\n    ],\n  };\n\n  const options = {\n    responsive: true,\n    elements: {\n      line: {\n        tension: 0,\n      },\n    },\n    title: {\n      display: true,\n      text: \"Messages over time.\",\n    },\n    plugins: {\n      zoom: {\n        pan: {\n          enabled: true,\n          mode: 'x'\n        },\n        zoom: {\n          enabled: true,\n          mode: 'x'\n        }\n      }\n    },\n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            parser: useFormat,\n          },\n          scaleLabel: {\n            display: true,\n            labelString: \"Date\",\n          },\n        },\n      ],\n      yAxes: [\n        {\n          scaleLabel: {\n            display: true,\n            labelString: \"Number of messages\",\n          },\n          ticks: {\n            stepSize: 1,\n            beginAtZero: true,\n          },\n        },\n      ],\n    },\n  };\n\n  return <Line data={data} options={options}></Line>;\n};\n","import React from \"react\";\nimport \"./MessageList.css\";\n\nimport { WhatsAppMessage } from \"../../models/whatsapp-message\";\n\nexport interface MessageListProps {\n  messages: WhatsAppMessage[];\n}\n\nexport const MessageList: React.FunctionComponent<MessageListProps> = (\n  props\n) => {\n  return (\n    <div>\n      {props.messages.map((m, i) => (\n        <div className=\"message\" key={i}>\n          <div className=\"message__sender\">{m.sender}</div>\n          <div className=\"message__date-time\">\n            {m.dateTime.toLocaleString()}\n          </div>\n          <div className=\"message__message\">{m.message}</div>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport ReactPaginate from \"react-paginate\";\n\nimport \"./App.css\";\nimport \"./pagination.css\";\n\nimport { Header } from \"./components/header/Header\";\nimport { ArchiveUpload } from \"./components/archive-upload/ArchiveUpload\";\nimport { readLines } from \"./utils/archive\";\nimport { WhatsAppMessage } from \"./models/whatsapp-message\";\nimport { bytesToSize } from \"./utils/file\";\nimport { Chart } from \"./components/chart/Chart\";\nimport { MessageList } from \"./components/message-list/MessageList\";\n\nconst parseArchiveWorker = new Worker(\n  process.env.PUBLIC_URL + \"/workers/parse-archive.js\"\n);\n\nconst pageSize = 15;\n\nfunction App() {\n  const [page, setPage] = useState<number>(0);\n  const [file, setFile] = useState<File | null>();\n  const [lines, setLines] = useState<string[]>();\n\n  const [percentage, setPercentage] = useState<number>(0);\n  const [messages, setMessages] = useState<WhatsAppMessage[]>([]);\n\n  const isLoading = () => percentage !== 100;\n\n  useEffect(() => {\n    const handler = (e: any) => {\n      if (e.data.hasOwnProperty(\"percentage\")) {\n        setPercentage(Math.round(e.data.percentage));\n      }\n\n      if (e.data.hasOwnProperty(\"messages\")) {\n        setMessages(e.data.messages);\n      }\n    };\n    parseArchiveWorker.addEventListener(\"message\", handler, false);\n    return () => parseArchiveWorker.removeEventListener(\"message\", handler);\n  });\n\n  useEffect(() => {\n    if (Array.isArray(lines)) {\n      setPage(0);\n      setPercentage(0);\n      setMessages([]);\n      parseArchiveWorker.postMessage(lines);\n    }\n  }, [lines]);\n\n  useEffect(() => {\n    const lines: string[] = [];\n    if (file) {\n      readLines(\n        file,\n        1000000000,\n        (line) => lines.push(line),\n        (error) => {\n          if (error) {\n            throw error;\n          } else {\n            setLines(lines);\n          }\n        }\n      );\n    }\n  }, [file]);\n\n  const onPageChange = (selectedItem: { selected: number }) => {\n    setPage(selectedItem.selected);\n  };\n\n  const pagesMessages = isLoading()\n    ? []\n    : messages.slice(page * pageSize, page * pageSize + pageSize);\n\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <ArchiveUpload setFile={setFile}></ArchiveUpload>\n\n      <br />\n\n      <table>\n        <tbody>\n          <tr>\n            <td>file size:</td>\n            <td>{!!file ? bytesToSize(file.size) : 0}</td>\n          </tr>\n          <tr>\n            <td>Messages:</td>\n            <td>{messages.length}</td>\n            <td>&nbsp; {percentage}%</td>\n          </tr>\n          <tr>\n            <td>Current page:</td>\n            <td>{page + 1}</td>\n          </tr>\n        </tbody>\n      </table>\n\n      <br />\n      <br />\n\n      <hr />\n\n      <ReactPaginate\n        previousLabel={\"previous\"}\n        nextLabel={\"next\"}\n        breakLabel={\"...\"}\n        breakClassName={\"break\"}\n        pageCount={Math.ceil(messages.length / pageSize)}\n        forcePage={page}\n        marginPagesDisplayed={2}\n        pageRangeDisplayed={5}\n        onPageChange={onPageChange}\n        containerClassName={\"pagination\"}\n        activeClassName={\"active\"}\n      />\n\n      <hr />\n\n      <br />\n      <br />\n\n\n      <MessageList messages={pagesMessages}></MessageList>\n      <Chart messages={messages} interval=\"month\"></Chart>\n    </div>\n  );\n}\n\nexport default App;\n","import moment from 'moment'\nimport { WhatsAppMessage } from \"../models/whatsapp-message\";\n\n/**\n * Read up to and including |maxlines| lines from |file|.\n *\n * @param {Blob} file - The file to be read.\n * @param {integer} maxLines - The maximum number of lines to read.\n * @param {function(string)} forEachLine - Called for each line.\n * @param {function(error)} onComplete - Called when the end of the file\n *     is reached or when |maxlines| lines have been read.\n */\nexport function readLines(\n  file: File, \n  maxLines: number, \n  forEachLine: (line: string) => void, \n  onComplete: (error?: DOMException | null) => void\n) {\n  const CHUNK_SIZE = 50000; // 50kb, arbitrarily chosen.\n  const decoder = new TextDecoder();\n  let offset = 0;\n  let linecount = 0;\n  let results = '';\n  const fr = new FileReader();\n\n  fr.onload = function() {\n      // Use stream:true in case we cut the file\n      // in the middle of a multi-byte character\n      results += decoder.decode(fr.result as ArrayBuffer, {stream: true});\n      var lines = results.split('\\n');\n      results = lines.pop() as string; // In case the line did not end yet.\n      linecount += lines.length;\n  \n      if (linecount > maxLines) {\n          // Read too many lines? Truncate the results.\n          lines.length -= linecount - maxLines;\n          linecount = maxLines;\n      }\n  \n      for (var i = 0; i < lines.length; ++i) {\n          forEachLine(lines[i] + '\\n');\n      }\n\n      offset += CHUNK_SIZE;\n      seek();\n  };\n  fr.onerror = function() {\n      onComplete(fr.error);\n  };\n  seek();\n  \n  function seek() {\n      if (linecount === maxLines) {\n          // We found enough lines.\n          onComplete(); // Done.\n          return;\n      }\n      if (offset !== 0 && offset >= file.size) {\n          // We did not find all lines, but there are no more lines.\n          forEachLine(results); // This is from lines.pop(), before.\n          onComplete(); // Done\n          return;\n      }\n      var slice = file.slice(offset, offset + CHUNK_SIZE);\n      fr.readAsArrayBuffer(slice);\n  }\n}\n\nexport function parseArchive(lines: string[], process: (percentage: number) => void): WhatsAppMessage[] {\n  const messages: WhatsAppMessage[] = [];\n\n  let whatsAppMessage: WhatsAppMessage | null = null;\n  const messageRegex = /\\[(\\d{2}-\\d{2}-\\d{4}\\s\\d{2}:\\d{2}:\\d{2})]\\s([^:]+):\\s(.*)/;\n\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n\n    if (messageRegex.test(line)) {\n      const r = messageRegex.exec(line);\n\n      if (r !== null) {\n        // ‎[30-03-2020 19:57:50] ananas: ananans\n        const dateTime = moment(r[1], \"DD-MM-YYYY HH:mm:ss\");\n\n        whatsAppMessage = {\n          dateTime: dateTime.toDate(),\n          sender: r[2],\n          message: r[3],\n          media: false,\n        };\n        messages.push(whatsAppMessage);\n      } else {\n        if (whatsAppMessage) {\n          whatsAppMessage.message += line;\n        }\n      }\n    }\n\n    if (i % 1000 === 0) {\n      process(((i / lines.length) * 100));\n    }\n  }\n  process(100);\n  return messages;\n}\n","export function bytesToSize(bytes: number) {\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    if (bytes === 0) {\n        return '0 Byte';\n    }\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i)) + ' ' + sizes[i];\n }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}