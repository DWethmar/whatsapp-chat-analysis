{"version":3,"sources":["components/header/Header.tsx","components/archive-upload/ArchiveUpload.tsx","utils/color.ts","components/message-chart/MessageChart.tsx","components/message-list/MessageList.tsx","App.tsx","utils/archive.ts","utils/file.ts","index.tsx"],"names":["Header","href","download","ArchiveUpload","props","type","id","className","accept","onChange","e","target","files","file","setFile","colors","require","palette","map","c","getColorFromIndex","i","length","MessageChart","messages","Array","isArray","dataSet","useFormat","message","date","interval","moment","dateTime","startOf","format","hasOwnProperty","sender","data","datasets","Object","keys","label","entries","s","x","y","fill","borderColor","console","log","options","responsive","animation","elements","line","tension","title","display","text","plugins","zoom","pan","enabled","mode","scales","xAxes","time","parser","scaleLabel","labelString","yAxes","ticks","stepSize","beginAtZero","MessageList","Row","index","style","key","isWhatsApp","toLocaleString","split","item","height","width","itemCount","itemSize","parseArchiveWorker","Worker","process","App","useState","lines","setLines","percentage","setPercentage","setMessages","setInterval","useEffect","handler","Math","round","addEventListener","removeEventListener","postMessage","maxLines","forEachLine","onComplete","decoder","TextDecoder","offset","linecount","results","fr","FileReader","seek","size","slice","readAsArrayBuffer","onload","decode","result","stream","pop","onerror","error","readLines","push","bytes","floor","pow","bytesToSize","value","v","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAEaA,G,YAAS,WACpB,OACE,gCACE,sDACA,6FACA,oLAAyJ,kCAAzJ,sBACA,oCAAS,uBAAGC,KAAK,iDAAR,SAAT,iDACA,2BAAG,uBAAGC,UAAQ,EAACD,KAAK,6FAAjB,6BCHIE,EAAwD,SAACC,GAMlE,OACI,6BACI,2BAAOC,KAAK,OACZC,GAAG,OACHC,UAAU,aACVC,OAAO,OACPC,SACI,SAAAC,GAAC,QAAMA,EAAEC,UAAYD,EAAEC,OAAOC,QAXhBC,EAYVH,EAAEC,OAAOC,MAAM,QAX3BR,EAAMU,QAAQD,IADO,IAACA,O,4CCNxBE,G,OAFUC,EAAQ,IAETC,CAAQ,CAAC,MAAO,eAAgB,GAAI,GAAGC,KAAI,SAACC,GAAD,iBAAmBA,OAEtE,SAASC,EAAkBC,GAC9B,OAAON,EAAOM,EAAIN,EAAOO,QCStB,IAAMC,EAAqD,SAACnB,GACjE,IAAMoB,EAAWpB,EAAMoB,SAEvB,IAAKC,MAAMC,QAAQF,IAAiC,IAApBA,EAASF,OACvC,OAAO,oDAGT,IAP2E,EAOrEK,EAAkD,GAEpDC,EAAY,GAT2D,cAerDJ,GAfqD,IAe3E,2BAAgC,CAAC,IAAtBK,EAAqB,QAC1BC,EAAe,GAEnB,OAAQ1B,EAAM2B,UACZ,IAAK,SACHD,EAAOE,IAAOH,EAAQI,UACnBC,QAAQ,UACRC,OATc,oBAUfP,EAVe,mBAWjB,MACF,IAAK,OACHE,EAAOE,IAAOH,EAAQI,UAAUC,QAAQ,QAAQC,OAb/B,oBAcjBP,EAdiB,mBAejB,MACF,IAAK,MACHE,EAAOE,IAAOH,EAAQI,UAAUE,OAlBpB,cAmBZP,EAnBY,aAoBZ,MACF,IAAK,OACHE,EAAOE,IAAOH,EAAQI,UAAUC,QAAQ,QAAQC,OAtBpC,cAuBZP,EAvBY,aAwBZ,MACF,IAAK,QACHE,EAAOE,IAAOH,EAAQI,UAAUE,OA3BlB,WA4BdP,EA5Bc,UAgCbD,EAAQS,eAAeP,EAAQQ,UAClCV,EAAQE,EAAQQ,QAAU,IAGvBV,EAAQE,EAAQQ,QAAQD,eAAeN,KAC1CH,EAAQE,EAAQQ,QAAQP,GAAQ,GAGlCH,EAAQE,EAAQQ,QAAQP,MAnDiD,8BAsD3E,IAAMQ,EAAO,CACXC,SAAS,YACJC,OAAOC,KAAKd,GAAST,KAAI,SAACmB,EAAQhB,GACnC,MAAO,CACLqB,MAAOL,EACPC,KAAME,OAAOG,QAAQhB,EAAQU,IAASnB,KAAI,SAAC0B,GAAD,MAAQ,CAChDC,EAAGD,EAAE,GACLE,EAAGF,EAAE,OAEPG,MAAM,EACNC,YAAwB,aAAXX,EAAwB,UAAYjB,EAAkBC,SAM3E4B,QAAQC,IAAIZ,GAEZ,IAAMa,EAAU,CACdC,YAAY,EACZC,WAAW,EACXC,SAAU,CACRC,KAAM,CACJC,QAAS,IAGbC,MAAO,CACLC,SAAS,EACTC,KAAM,uBAERC,QAAS,CACPC,KAAM,CACJC,IAAK,CACHC,SAAS,EACTC,KAAM,KAERH,KAAM,CACJE,SAAS,EACTC,KAAM,OAIZC,OAAQ,CACNC,MAAO,CACL,CACE7D,KAAM,OACN8D,KAAM,CACJC,OAAQxC,GAEVyC,WAAY,CACVX,SAAS,EACTY,YAAa,UAInBC,MAAO,CACL,CACEF,WAAY,CACVX,SAAS,EACTY,YAAa,sBAEfE,MAAO,CACLC,SAAU,EACVC,aAAa,OAOvB,OAAO,kBAAC,IAAD,CAAMpC,KAAMA,EAAMa,QAASA,K,gBC9HvBwB,G,OAAyD,SACpEvE,GAEA,IAAMwE,EAAM,SAAC,GAMN,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,MAKMjD,EAAUzB,EAAMoB,SAASqD,GAC/B,OACE,yBAAKC,MAAOA,EAAOC,IAAKF,EAAOtE,UAAU,qBACvC,yBAAKA,UAAW,WAAasE,EAAQ,IAAM,EAAI,QAAU,SACvD,yBAAKtE,UAAW,mBAAqBsB,EAAQmD,WAAa,6BAA+B,KAAQnD,EAAQQ,QACzG,yBAAK9B,UAAU,sBACZsB,EAAQI,SAASgD,kBAEpB,yBAAK1E,UAAU,mBAAmBkD,MAAO5B,EAAQA,SAC9CA,EAAQA,QAAQqD,MAAM,MAAMhE,KAAI,SAACiE,EAAM9D,GACtC,OAAO,uBAAG0D,IAAK1D,GAAI8D,UAQ/B,OACE,yBAAK5E,UAAU,gBACb,kBAAC,IAAD,MACG,gBAAG6E,EAAH,EAAGA,OAAQC,EAAX,EAAWA,MAAX,OACC,kBAAC,IAAD,CACED,OAAQA,EACRE,UAAWlF,EAAMoB,SAASF,OAC1BiE,SAAU,GACVF,MAAOA,GAENT,SClCPY,EAAqB,IAAIC,OAC7BC,oDA6FaC,MA1Ff,WAAgB,IAAD,EACWC,qBADX,mBACN/E,EADM,KACAC,EADA,OAEa8E,qBAFb,mBAENC,EAFM,KAECC,EAFD,OAIuBF,mBAAiB,GAJxC,mBAING,EAJM,KAIMC,EAJN,OAKmBJ,mBAA4B,IAL/C,mBAKNpE,EALM,KAKIyE,EALJ,OAMmBL,mBAAmB,SANtC,mBAMN7D,EANM,KAMImE,EANJ,KAiDb,OAzCAC,qBAAU,WACR,IAAMC,EAAU,SAAC1F,GACXA,EAAE4B,KAAKF,eAAe,eACxB4D,EAAcK,KAAKC,MAAM5F,EAAE4B,KAAKyD,aAG9BrF,EAAE4B,KAAKF,eAAe,aACxB6D,EAAYvF,EAAE4B,KAAKd,WAKvB,OADAgE,EAAmBe,iBAAiB,UAAWH,GAAS,GACjD,kBAAMZ,EAAmBgB,oBAAoB,UAAWJ,OAGjED,qBAAU,WACJ1E,MAAMC,QAAQmE,KAChBG,EAAc,GACdC,EAAY,IACZT,EAAmBiB,YAAYZ,MAEhC,CAACA,IAEJM,qBAAU,WACR,IAAMN,EAAkB,GACpBhF,GCzCD,SACLA,EACA6F,EACAC,EACAC,GAEA,IACMC,EAAU,IAAIC,YAChBC,EAAS,EACTC,EAAY,EACZC,EAAU,GACRC,EAAK,IAAIC,WA4Bf,SAASC,IACL,GAAIJ,IAAcN,EAAlB,CAKA,GAAe,IAAXK,GAAgBA,GAAUlG,EAAKwG,KAI/B,OAFAV,EAAYM,QACZL,IAGJ,IAAIU,EAAQzG,EAAKyG,MAAMP,EAAQA,EA7ChB,KA8CfG,EAAGK,kBAAkBD,QAVjBV,IA7BRM,EAAGM,OAAS,WAIR,IAAI3B,GADJoB,GAAWJ,EAAQY,OAAOP,EAAGQ,OAAuB,CAACC,QAAQ,KACzCzC,MAAM,MAC1B+B,EAAUpB,EAAM+B,OAChBZ,GAAanB,EAAMvE,QAEHoF,IAEZb,EAAMvE,QAAU0F,EAAYN,EAC5BM,EAAYN,GAGhB,IAAK,IAAIrF,EAAI,EAAGA,EAAIwE,EAAMvE,SAAUD,EAChCsF,EAAYd,EAAMxE,GAAK,MAG3B0F,GAzBe,IA0BfK,KAEJF,EAAGW,QAAU,WACTjB,EAAWM,EAAGY,QAElBV,IDKIW,CACElH,EACA,KACA,SAAC0C,GAAD,OAAUsC,EAAMmC,KAAKzE,MACrB,SAACuE,GACC,GAAIA,EACF,MAAMA,EAENhC,EAASD,QAKhB,CAAChF,IAGF,yBAAKN,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAeO,QAASA,IAExB,6BAEA,+BACE,+BACE,4BACE,0CACA,4BAAOD,EEhFZ,SAAqBoH,GAExB,GAAc,IAAVA,EACA,MAAO,SAEX,IAAM5G,EAAIgF,KAAK6B,MAAM7B,KAAKnD,IAAI+E,GAAS5B,KAAKnD,IAAI,OAChD,OAAOmD,KAAKC,MAAM2B,EAAQ5B,KAAK8B,IAAI,KAAM9G,IAAM,IALnC,CAAC,QAAS,KAAM,KAAM,KAAM,MAKmBA,GF0ErC+G,CAAYvH,EAAKwG,MAAQ,IAEzC,4BACE,yCACA,4BAAK7F,EAASF,QACd,oCAAYyE,EAAZ,QAKN,6BACgB,MAAfA,GAAsBvE,EAASF,OAAS,GACvC,oCACE,kBAAC,EAAD,CAAaE,SAAUA,IAEvB,6BAEA,4BAAQ6G,MAAOtG,EAAUtB,SAAU,SAACC,GAAD,OAAOwF,EAAYxF,EAAEC,OAAO0H,SAC5D,CAAC,MAAO,OAAQ,SAASnH,KAAI,SAACoH,EAAGjH,GAAJ,OAC5B,4BAAQgH,MAAOC,GAAIA,OAIvB,kBAAC,EAAD,CAAc9G,SAAUA,EAAUO,SAAUA,OGlGtDwG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.af82738e.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Header = () => {\n  return (\n    <header>\n      <h1>WhatsApp Chat Analysis</h1>\n      <p>Upload a Whatsapp chat archive to view the messages and stats.</p>\n      <p>Everything is done in the browser, so no data is sent to a server and the data does not persists after a page refresh. But don't use this is you have <b>any</b> privacy concerns.</p>\n      <p>Click <a href=\"https://faq.whatsapp.com/en/android/23756533/\">here </a> to find out how to export a chat on android.</p>\n      <p><a download href=\"https://raw.githubusercontent.com/DWethmar/whatsapp-chat-analysis/master/public/_chat.txt\">Example Whatsapp chat</a></p>\n    </header>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nexport interface ArchiveUploadProps {\n    setFile: (file: File) => void\n}\n\nexport const ArchiveUpload: FunctionComponent<ArchiveUploadProps>  = (props) => {\n\n    const handleFileChosen = (file: File) => {\n        props.setFile(file);\n    }\n\n    return (\n        <div>\n            <input type=\"file\"\n            id=\"file\"\n            className=\"input-file\"\n            accept=\".txt\"\n            onChange={\n                e => !!e.target && !!e.target.files && handleFileChosen(\n                    e.target.files[0]\n                )\n            }\n        />\n        </div>\n    );\n}\n","const palette = require('google-palette');\n\nconst colors = palette(['tol', 'qualitative'], 50, 0).map((c: string) => `#${c}`);\n\nexport function getColorFromIndex(i: number) {\n    return colors[i % colors.length];\n}\n","import React, { FunctionComponent } from \"react\";\nimport moment from \"moment\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chartjs-plugin-zoom\";\n\nimport { WhatsAppMessage } from \"../../models/whatsappMessage\";\nimport { getColorFromIndex } from \"../../utils/color\";\n\nexport type Interval = \"minute\" | \"hour\" | \"day\" | \"week\" | \"month\";\nexport interface MessageChartProps {\n  messages: WhatsAppMessage[];\n  interval: Interval;\n}\n\nexport const MessageChart: FunctionComponent<MessageChartProps> = (props) => {\n  const messages = props.messages;\n\n  if (!Array.isArray(messages) || messages.length === 0) {\n    return <span>Chart has no data.</span>;\n  }\n\n  const dataSet: Record<string, Record<string, number>> = {};\n\n  let useFormat = \"\";\n\n  const monthFormat = \"MM/YYYY\";\n  const dayFormat = \"DD/MM/YYYY\";\n  const dateTimeFormat = \"DD/MM/YYYY HH:mm\";\n\n  for (const message of messages) {\n    let date: string = \"\";\n\n    switch (props.interval) {\n      case \"minute\":\n        date = moment(message.dateTime)\n          .startOf(\"minute\")\n          .format(dateTimeFormat);\n          useFormat = dateTimeFormat;\n        break;\n      case \"hour\":\n        date = moment(message.dateTime).startOf(\"hour\").format(dateTimeFormat);\n        useFormat = dateTimeFormat;\n        break;\n      case \"day\":\n        date = moment(message.dateTime).format(dayFormat);\n        useFormat = dayFormat;\n        break;\n      case \"week\":\n        date = moment(message.dateTime).startOf(\"week\").format(dayFormat);\n        useFormat = dayFormat;\n        break;  \n      case \"month\":\n        date = moment(message.dateTime).format(monthFormat);\n        useFormat = monthFormat;\n        break;\n    }\n\n    if (!dataSet.hasOwnProperty(message.sender)) {\n      dataSet[message.sender] = {};\n    }\n\n    if (!dataSet[message.sender].hasOwnProperty(date)) {\n      dataSet[message.sender][date] = 0;\n    }\n\n    dataSet[message.sender][date]++;\n  }\n\n  const data = {\n    datasets: [\n      ...Object.keys(dataSet).map((sender, i) => {\n        return {\n          label: sender,\n          data: Object.entries(dataSet[sender]).map((s) => ({\n            x: s[0],\n            y: s[1],\n          })),\n          fill: false,\n          borderColor: sender === \"Whatsapp\" ? \"#075E54\" : getColorFromIndex(i),\n        };\n      }),\n    ],\n  };\n\n  console.log(data);\n\n  const options = {\n    responsive: true,\n    animation: false,\n    elements: {\n      line: {\n        tension: 0,\n      },\n    },\n    title: {\n      display: true,\n      text: \"Messages over time.\",\n    },\n    plugins: {\n      zoom: {\n        pan: {\n          enabled: true,\n          mode: 'x'\n        },\n        zoom: {\n          enabled: true,\n          mode: 'x'\n        }\n      }\n    },\n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            parser: useFormat,\n          },\n          scaleLabel: {\n            display: true,\n            labelString: \"Date\",\n          },\n        },\n      ],\n      yAxes: [\n        {\n          scaleLabel: {\n            display: true,\n            labelString: \"Number of messages\",\n          },\n          ticks: {\n            stepSize: 1,\n            beginAtZero: true,\n          },\n        },\n      ],\n    },\n  };\n\n  return <Line data={data} options={options}></Line>;\n};\n","import React from \"react\";\nimport { FixedSizeList as List } from \"react-window\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\n\nimport \"./MessageList.css\";\n\nimport { WhatsAppMessage } from \"../../models/whatsappMessage\";\n\nexport interface MessageListProps {\n  messages: WhatsAppMessage[];\n}\n\nexport const MessageList: React.FunctionComponent<MessageListProps> = (\n  props\n) => {\n  const Row = ({\n    index,\n    style,\n  }: {\n    index: number;\n    style: React.CSSProperties;\n  }) => {\n    const message = props.messages[index];\n    return (\n      <div style={style} key={index} className=\"message-list__row\">\n        <div className={\"message\" + (index % 2 === 0 ? \" even\" : \" odd\")}>\n          <div className={\"message__sender\" + (message.isWhatsApp ? \" message__sender--whatsapp\" : \"\")  }>{message.sender}</div>\n          <div className=\"message__date-time\">\n            {message.dateTime.toLocaleString()}\n          </div>\n          <div className=\"message__message\" title={message.message}>\n            {message.message.split(\"\\n\").map((item, i) => {\n              return <p key={i}>{item}</p>;\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"message-list\">\n      <AutoSizer>\n        {({ height, width }) => (\n          <List\n            height={height}\n            itemCount={props.messages.length}\n            itemSize={40}\n            width={width}\n          >\n            {Row}\n          </List>\n        )}\n      </AutoSizer>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\nimport \"./pagination.css\";\n\nimport { Header } from \"./components/header/Header\";\nimport { ArchiveUpload } from \"./components/archive-upload/ArchiveUpload\";\nimport { readLines } from \"./utils/archive\";\nimport { WhatsAppMessage } from \"./models/whatsappMessage\";\nimport { bytesToSize } from \"./utils/file\";\nimport {\n  MessageChart,\n  Interval,\n} from \"./components/message-chart/MessageChart\";\nimport { MessageList } from \"./components/message-list/MessageList\";\n\nconst parseArchiveWorker = new Worker(\n  process.env.PUBLIC_URL + \"/workers/parse-archive.js\"\n);\n\nfunction App() {\n  const [file, setFile] = useState<File | null>();\n  const [lines, setLines] = useState<string[]>();\n\n  const [percentage, setPercentage] = useState<number>(0);\n  const [messages, setMessages] = useState<WhatsAppMessage[]>([]);\n  const [interval, setInterval] = useState<Interval>(\"month\");\n\n  useEffect(() => {\n    const handler = (e: any) => {\n      if (e.data.hasOwnProperty(\"percentage\")) {\n        setPercentage(Math.round(e.data.percentage));\n      }\n\n      if (e.data.hasOwnProperty(\"messages\")) {\n        setMessages(e.data.messages);\n      }\n    };\n\n    parseArchiveWorker.addEventListener(\"message\", handler, false);\n    return () => parseArchiveWorker.removeEventListener(\"message\", handler);\n  });\n\n  useEffect(() => {\n    if (Array.isArray(lines)) {\n      setPercentage(0);\n      setMessages([]);\n      parseArchiveWorker.postMessage(lines);\n    }\n  }, [lines]);\n\n  useEffect(() => {\n    const lines: string[] = [];\n    if (file) {\n      readLines(\n        file,\n        1000000000,\n        (line) => lines.push(line),\n        (error) => {\n          if (error) {\n            throw error;\n          } else {\n            setLines(lines);\n          }\n        }\n      );\n    }\n  }, [file]);\n\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <ArchiveUpload setFile={setFile}></ArchiveUpload>\n\n      <br />\n\n      <table>\n        <tbody>\n          <tr>\n            <td>file size:</td>\n            <td>{!!file ? bytesToSize(file.size) : 0}</td>\n          </tr>\n          <tr>\n            <td>Messages:</td>\n            <td>{messages.length}</td>\n            <td>&nbsp; {percentage}%</td>\n          </tr>\n        </tbody>\n      </table>\n\n      <hr />\n      {percentage === 100 && messages.length > 0 && (\n        <>\n          <MessageList messages={messages}></MessageList>\n\n          <hr />\n\n          <select value={interval} onChange={(e) => setInterval(e.target.value as Interval)}>\n            {[\"day\", \"week\", \"month\"].map((v, i) => (\n              <option value={v}>{v}</option>\n            ))}\n          </select>\n\n          <MessageChart messages={messages} interval={interval}></MessageChart>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import moment from 'moment'\nimport { WhatsAppMessage } from \"../models/whatsappMessage\";\n\n/**\n * Read up to and including |maxlines| lines from |file|.\n *\n * @param {Blob} file - The file to be read.\n * @param {integer} maxLines - The maximum number of lines to read.\n * @param {function(string)} forEachLine - Called for each line.\n * @param {function(error)} onComplete - Called when the end of the file\n *     is reached or when |maxlines| lines have been read.\n */\nexport function readLines(\n  file: File, \n  maxLines: number, \n  forEachLine: (line: string) => void, \n  onComplete: (error?: DOMException | null) => void\n) {\n  const CHUNK_SIZE = 50000; // 50kb, arbitrarily chosen.\n  const decoder = new TextDecoder();\n  let offset = 0;\n  let linecount = 0;\n  let results = '';\n  const fr = new FileReader();\n\n  fr.onload = function() {\n      // Use stream:true in case we cut the file\n      // in the middle of a multi-byte character\n      results += decoder.decode(fr.result as ArrayBuffer, {stream: true});\n      var lines = results.split('\\n');\n      results = lines.pop() as string; // In case the line did not end yet.\n      linecount += lines.length;\n  \n      if (linecount > maxLines) {\n          // Read too many lines? Truncate the results.\n          lines.length -= linecount - maxLines;\n          linecount = maxLines;\n      }\n  \n      for (var i = 0; i < lines.length; ++i) {\n          forEachLine(lines[i] + '\\n');\n      }\n\n      offset += CHUNK_SIZE;\n      seek();\n  };\n  fr.onerror = function() {\n      onComplete(fr.error);\n  };\n  seek();\n  \n  function seek() {\n      if (linecount === maxLines) {\n          // We found enough lines.\n          onComplete(); // Done.\n          return;\n      }\n      if (offset !== 0 && offset >= file.size) {\n          // We did not find all lines, but there are no more lines.\n          forEachLine(results); // This is from lines.pop(), before.\n          onComplete(); // Done\n          return;\n      }\n      var slice = file.slice(offset, offset + CHUNK_SIZE);\n      fr.readAsArrayBuffer(slice);\n  }\n}\n\nexport function parseArchive(lines: string[], process: (percentage: number) => void): WhatsAppMessage[] {\n  const messages: WhatsAppMessage[] = [];\n\n  let whatsAppMessage: WhatsAppMessage | null = null;\n  const messageRegex = /\\[(\\d{2}-\\d{2}-\\d{4}\\s\\d{2}:\\d{2}:\\d{2})]\\s(?:([^:]+):\\s)?(.*)/;\n  \n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n\n    if (messageRegex.test(line)) {\n      const r = messageRegex.exec(line);\n\n      if (r !== null) {\n        // ‎[30-03-2020 19:57:50] ananas: ananans\n        const dateTime = moment(r[1], \"DD-MM-YYYY HH:mm:ss\");\n\n        whatsAppMessage = {\n          dateTime: dateTime.toDate(),\n          sender: r[2] || \"Whatsapp\",\n          message: r[3],\n          isWhatsApp: r[2] === undefined,\n        };\n        messages.push(whatsAppMessage);\n      } \n    } else {\n      if (whatsAppMessage) {\n        whatsAppMessage.message += line;\n      }\n    }\n\n    // Only report every 1000 lines and do that lines / 1000 times.\n    if (i % Math.round(lines.length / 1000) * 1000 === 0) {\n      process(((i / lines.length) * 100));\n    }\n  }\n  process(100);\n  return messages;\n}\n","export function bytesToSize(bytes: number) {\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    if (bytes === 0) {\n        return '0 Byte';\n    }\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i)) + ' ' + sizes[i];\n }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}